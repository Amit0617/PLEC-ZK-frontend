// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {

    /**
     * @notice EZKL P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all instances are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583; 

    function verify(
        uint256[3] calldata instances,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[719] memory transcript;
        for (uint i = 0; i < instances.length; i++) {
            require(instances[i] < SIZE_LIMIT);
        }
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x24), f_q))mstore(0xe0, mod(calldataload(0x44), f_q))mstore(0x80, 12833464818343292904455543607750133328731862301561857666941241659009857952609)        {            let x := calldataload(0xa4)            mstore(0x100, x)            let y := calldataload(0xc4)            mstore(0x120, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xe4)            mstore(0x140, x)            let y := calldataload(0x104)            mstore(0x160, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x124)            mstore(0x180, x)            let y := calldataload(0x144)            mstore(0x1a0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1c0, keccak256(0x80, 320)){            let hash := mload(0x1c0)            mstore(0x1e0, mod(hash, f_q))            mstore(0x200, hash)        }        {            let x := calldataload(0x164)            mstore(0x220, x)            let y := calldataload(0x184)            mstore(0x240, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1a4)            mstore(0x260, x)            let y := calldataload(0x1c4)            mstore(0x280, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x2a0, keccak256(0x200, 160)){            let hash := mload(0x2a0)            mstore(0x2c0, mod(hash, f_q))            mstore(0x2e0, hash)        }mstore8(0x300, 1)mstore(0x300, keccak256(0x2e0, 33)){            let hash := mload(0x300)            mstore(0x320, mod(hash, f_q))            mstore(0x340, hash)        }        {            let x := calldataload(0x1e4)            mstore(0x360, x)            let y := calldataload(0x204)            mstore(0x380, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x224)            mstore(0x3a0, x)            let y := calldataload(0x244)            mstore(0x3c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x264)            mstore(0x3e0, x)            let y := calldataload(0x284)            mstore(0x400, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2a4)            mstore(0x420, x)            let y := calldataload(0x2c4)            mstore(0x440, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x460, keccak256(0x340, 288)){            let hash := mload(0x460)            mstore(0x480, mod(hash, f_q))            mstore(0x4a0, hash)        }        {            let x := calldataload(0x2e4)            mstore(0x4c0, x)            let y := calldataload(0x304)            mstore(0x4e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x324)            mstore(0x500, x)            let y := calldataload(0x344)            mstore(0x520, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x364)            mstore(0x540, x)            let y := calldataload(0x384)            mstore(0x560, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3a4)            mstore(0x580, x)            let y := calldataload(0x3c4)            mstore(0x5a0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x5c0, keccak256(0x4a0, 288)){            let hash := mload(0x5c0)            mstore(0x5e0, mod(hash, f_q))            mstore(0x600, hash)        }mstore(0x620, mod(calldataload(0x3e4), f_q))mstore(0x640, mod(calldataload(0x404), f_q))mstore(0x660, mod(calldataload(0x424), f_q))mstore(0x680, mod(calldataload(0x444), f_q))mstore(0x6a0, mod(calldataload(0x464), f_q))mstore(0x6c0, mod(calldataload(0x484), f_q))mstore(0x6e0, mod(calldataload(0x4a4), f_q))mstore(0x700, mod(calldataload(0x4c4), f_q))mstore(0x720, mod(calldataload(0x4e4), f_q))mstore(0x740, mod(calldataload(0x504), f_q))mstore(0x760, mod(calldataload(0x524), f_q))mstore(0x780, mod(calldataload(0x544), f_q))mstore(0x7a0, mod(calldataload(0x564), f_q))mstore(0x7c0, mod(calldataload(0x584), f_q))mstore(0x7e0, mod(calldataload(0x5a4), f_q))mstore(0x800, mod(calldataload(0x5c4), f_q))mstore(0x820, mod(calldataload(0x5e4), f_q))mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, keccak256(0x600, 928)){            let hash := mload(0x9a0)            mstore(0x9c0, mod(hash, f_q))            mstore(0x9e0, hash)        }        {            let x := calldataload(0x764)            mstore(0xa00, x)            let y := calldataload(0x784)            mstore(0xa20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x7a4)            mstore(0xa40, x)            let y := calldataload(0x7c4)            mstore(0xa60, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x7e4)            mstore(0xa80, x)            let y := calldataload(0x804)            mstore(0xaa0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x824)            mstore(0xac0, x)            let y := calldataload(0x844)            mstore(0xae0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xb00, keccak256(0x9e0, 288)){            let hash := mload(0xb00)            mstore(0xb20, mod(hash, f_q))            mstore(0xb40, hash)        }mstore(0xb60, mulmod(mload(0x5e0), mload(0x5e0), f_q))mstore(0xb80, mulmod(mload(0xb60), mload(0xb60), f_q))mstore(0xba0, mulmod(mload(0xb80), mload(0xb80), f_q))mstore(0xbc0, mulmod(mload(0xba0), mload(0xba0), f_q))mstore(0xbe0, mulmod(mload(0xbc0), mload(0xbc0), f_q))mstore(0xc00, mulmod(mload(0xbe0), mload(0xbe0), f_q))mstore(0xc20, mulmod(mload(0xc00), mload(0xc00), f_q))mstore(0xc40, addmod(mload(0xc20), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0xc60, mulmod(mload(0xc40), 21717240974403030884572605700372452626919080303537784075388061966368184991745, f_q))mstore(0xc80, mulmod(mload(0xc60), 21262384822466439274137541430102393376441243110026393623692977826997277779276, f_q))mstore(0xca0, addmod(mload(0x5e0), 625858049372835948108864315154881712107121290389640720005226359578530716341, f_q))mstore(0xcc0, mulmod(mload(0xc60), 13204553845014350241221754834505072441794913243508773884968882153681133558714, f_q))mstore(0xce0, addmod(mload(0x5e0), 8683689026824924981024650910752202646753451156907260458729322032894674936903, f_q))mstore(0xd00, mulmod(mload(0xc60), 17704588942648532530972307366230787358793284390049200127770755029903181125533, f_q))mstore(0xd20, addmod(mload(0x5e0), 4183653929190742691274098379026487729755080010366834215927449156672627370084, f_q))mstore(0xd40, mulmod(mload(0xc60), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))mstore(0xd60, addmod(mload(0x5e0), 11720992161325191070654005918109190375262628904410017843732988071774407454149, f_q))mstore(0xd80, mulmod(mload(0xc60), 4658854783519236281304787251426829785380272013053939496434657852755686889074, f_q))mstore(0xda0, addmod(mload(0x5e0), 17229388088320038940941618493830445303168092387362094847263546333820121606543, f_q))mstore(0xdc0, mulmod(mload(0xc60), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))mstore(0xde0, addmod(mload(0x5e0), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))mstore(0xe00, mulmod(mload(0xc60), 1, f_q))mstore(0xe20, addmod(mload(0x5e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0xe40, mulmod(mload(0xc60), 18154240498369470423574571952998640420834620155273666494480695920805672807787, f_q))mstore(0xe60, addmod(mload(0x5e0), 3734002373469804798671833792258634667713744245142367849217508265770135687830, f_q))mstore(0xe80, mulmod(mload(0xc60), 12799441450189702121232122059226990287081568291547011007819741462284200902087, f_q))mstore(0xea0, addmod(mload(0x5e0), 9088801421649573101014283686030284801466796108869023335878462724291607593530, f_q)){            let prod := mload(0xca0)                prod := mulmod(mload(0xce0), prod, f_q)                mstore(0xec0, prod)                            prod := mulmod(mload(0xd20), prod, f_q)                mstore(0xee0, prod)                            prod := mulmod(mload(0xd60), prod, f_q)                mstore(0xf00, prod)                            prod := mulmod(mload(0xda0), prod, f_q)                mstore(0xf20, prod)                            prod := mulmod(mload(0xde0), prod, f_q)                mstore(0xf40, prod)                            prod := mulmod(mload(0xe20), prod, f_q)                mstore(0xf60, prod)                            prod := mulmod(mload(0xe60), prod, f_q)                mstore(0xf80, prod)                            prod := mulmod(mload(0xea0), prod, f_q)                mstore(0xfa0, prod)                            prod := mulmod(mload(0xc40), prod, f_q)                mstore(0xfc0, prod)                    }mstore(0x1000, 32)mstore(0x1020, 32)mstore(0x1040, 32)mstore(0x1060, mload(0xfc0))mstore(0x1080, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x10a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1000, 0xc0, 0xfe0, 0x20), 1), success){                        let inv := mload(0xfe0)            let v                            v := mload(0xc40)                    mstore(0xc40, mulmod(mload(0xfa0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xea0)                    mstore(0xea0, mulmod(mload(0xf80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xe60)                    mstore(0xe60, mulmod(mload(0xf60), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xe20)                    mstore(0xe20, mulmod(mload(0xf40), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xde0)                    mstore(0xde0, mulmod(mload(0xf20), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xda0)                    mstore(0xda0, mulmod(mload(0xf00), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xd60)                    mstore(0xd60, mulmod(mload(0xee0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xd20)                    mstore(0xd20, mulmod(mload(0xec0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xce0)                    mstore(0xce0, mulmod(mload(0xca0), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0xca0, inv)        }mstore(0x10c0, mulmod(mload(0xc80), mload(0xca0), f_q))mstore(0x10e0, mulmod(mload(0xcc0), mload(0xce0), f_q))mstore(0x1100, mulmod(mload(0xd00), mload(0xd20), f_q))mstore(0x1120, mulmod(mload(0xd40), mload(0xd60), f_q))mstore(0x1140, mulmod(mload(0xd80), mload(0xda0), f_q))mstore(0x1160, mulmod(mload(0xdc0), mload(0xde0), f_q))mstore(0x1180, mulmod(mload(0xe00), mload(0xe20), f_q))mstore(0x11a0, mulmod(mload(0xe40), mload(0xe60), f_q))mstore(0x11c0, mulmod(mload(0xe80), mload(0xea0), f_q)){            let result := mulmod(mload(0x1180), mload(0xa0), f_q)result := addmod(mulmod(mload(0x11a0), mload(0xc0), f_q), result, f_q)result := addmod(mulmod(mload(0x11c0), mload(0xe0), f_q), result, f_q)mstore(0x11e0, result)        }mstore(0x1200, addmod(1, sub(f_q, mload(0x720)), f_q))mstore(0x1220, mulmod(mload(0x1200), mload(0x720), f_q))mstore(0x1240, addmod(2, sub(f_q, mload(0x720)), f_q))mstore(0x1260, mulmod(mload(0x1240), mload(0x1220), f_q))mstore(0x1280, mulmod(mload(0x640), mload(0x620), f_q))mstore(0x12a0, addmod(mload(0x1280), mload(0x680), f_q))mstore(0x12c0, addmod(mload(0x660), sub(f_q, mload(0x12a0)), f_q))mstore(0x12e0, mulmod(mload(0x12c0), mload(0x1260), f_q))mstore(0x1300, mulmod(mload(0x480), mload(0x12e0), f_q))mstore(0x1320, addmod(2, sub(f_q, mload(0x740)), f_q))mstore(0x1340, mulmod(mload(0x1320), mload(0x740), f_q))mstore(0x1360, addmod(3, sub(f_q, mload(0x740)), f_q))mstore(0x1380, mulmod(mload(0x1360), mload(0x1340), f_q))mstore(0x13a0, mulmod(mload(0x680), mload(0x640), f_q))mstore(0x13c0, addmod(mload(0x660), sub(f_q, mload(0x13a0)), f_q))mstore(0x13e0, mulmod(mload(0x13c0), mload(0x1380), f_q))mstore(0x1400, addmod(mload(0x1300), mload(0x13e0), f_q))mstore(0x1420, mulmod(mload(0x480), mload(0x1400), f_q))mstore(0x1440, addmod(2, sub(f_q, mload(0x780)), f_q))mstore(0x1460, mulmod(mload(0x1440), mload(0x780), f_q))mstore(0x1480, addmod(mload(0x660), sub(f_q, mload(0x640)), f_q))mstore(0x14a0, mulmod(mload(0x1480), mload(0x1460), f_q))mstore(0x14c0, addmod(mload(0x1420), mload(0x14a0), f_q))mstore(0x14e0, mulmod(mload(0x480), mload(0x14c0), f_q))mstore(0x1500, mulmod(mload(0x1240), mload(0x720), f_q))mstore(0x1520, addmod(3, sub(f_q, mload(0x720)), f_q))mstore(0x1540, mulmod(mload(0x1520), mload(0x1500), f_q))mstore(0x1560, addmod(mload(0x620), mload(0x640), f_q))mstore(0x1580, addmod(mload(0x660), sub(f_q, mload(0x1560)), f_q))mstore(0x15a0, mulmod(mload(0x1580), mload(0x1540), f_q))mstore(0x15c0, addmod(mload(0x14e0), mload(0x15a0), f_q))mstore(0x15e0, mulmod(mload(0x480), mload(0x15c0), f_q))mstore(0x1600, addmod(2, sub(f_q, mload(0x760)), f_q))mstore(0x1620, mulmod(mload(0x1600), mload(0x760), f_q))mstore(0x1640, addmod(3, sub(f_q, mload(0x760)), f_q))mstore(0x1660, mulmod(mload(0x1640), mload(0x1620), f_q))mstore(0x1680, addmod(mload(0x660), sub(f_q, mload(0x1280)), f_q))mstore(0x16a0, mulmod(mload(0x1680), mload(0x1660), f_q))mstore(0x16c0, addmod(mload(0x15e0), mload(0x16a0), f_q))mstore(0x16e0, mulmod(mload(0x480), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x1520), mload(0x1220), f_q))mstore(0x1720, addmod(mload(0x620), sub(f_q, mload(0x640)), f_q))mstore(0x1740, addmod(mload(0x660), sub(f_q, mload(0x1720)), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0x1700), f_q))mstore(0x1780, addmod(mload(0x16e0), mload(0x1760), f_q))mstore(0x17a0, mulmod(mload(0x480), mload(0x1780), f_q))mstore(0x17c0, addmod(1, sub(f_q, mload(0x740)), f_q))mstore(0x17e0, mulmod(mload(0x17c0), mload(0x740), f_q))mstore(0x1800, mulmod(mload(0x1360), mload(0x17e0), f_q))mstore(0x1820, addmod(mload(0x640), mload(0x680), f_q))mstore(0x1840, addmod(mload(0x660), sub(f_q, mload(0x1820)), f_q))mstore(0x1860, mulmod(mload(0x1840), mload(0x1800), f_q))mstore(0x1880, addmod(mload(0x17a0), mload(0x1860), f_q))mstore(0x18a0, mulmod(mload(0x480), mload(0x1880), f_q))mstore(0x18c0, mulmod(mload(0x1320), mload(0x17e0), f_q))mstore(0x18e0, addmod(mload(0x660), sub(f_q, sub(f_q, mload(0x640))), f_q))mstore(0x1900, mulmod(mload(0x18e0), mload(0x18c0), f_q))mstore(0x1920, addmod(mload(0x18a0), mload(0x1900), f_q))mstore(0x1940, mulmod(mload(0x480), mload(0x1920), f_q))mstore(0x1960, addmod(1, sub(f_q, mload(0x760)), f_q))mstore(0x1980, mulmod(mload(0x1960), mload(0x760), f_q))mstore(0x19a0, mulmod(mload(0x1640), mload(0x1980), f_q))mstore(0x19c0, addmod(mload(0x640), sub(f_q, mload(0x660)), f_q))mstore(0x19e0, mulmod(mload(0x19c0), mload(0x19a0), f_q))mstore(0x1a00, addmod(mload(0x1940), mload(0x19e0), f_q))mstore(0x1a20, mulmod(mload(0x480), mload(0x1a00), f_q))mstore(0x1a40, mulmod(mload(0x1600), mload(0x1980), f_q))mstore(0x1a60, mulmod(mload(0x640), mload(0x1a40), f_q))mstore(0x1a80, addmod(mload(0x1a20), mload(0x1a60), f_q))mstore(0x1aa0, mulmod(mload(0x480), mload(0x1a80), f_q))mstore(0x1ac0, addmod(1, sub(f_q, mload(0x780)), f_q))mstore(0x1ae0, mulmod(mload(0x1ac0), mload(0x780), f_q))mstore(0x1b00, addmod(mload(0x640), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1b20, mulmod(mload(0x1b00), mload(0x640), f_q))mstore(0x1b40, mulmod(mload(0x1b20), mload(0x1ae0), f_q))mstore(0x1b60, addmod(mload(0x1aa0), mload(0x1b40), f_q))mstore(0x1b80, mulmod(mload(0x480), mload(0x1b60), f_q))mstore(0x1ba0, addmod(1, sub(f_q, mload(0x860)), f_q))mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x1180), f_q))mstore(0x1be0, addmod(mload(0x1b80), mload(0x1bc0), f_q))mstore(0x1c00, mulmod(mload(0x480), mload(0x1be0), f_q))mstore(0x1c20, mulmod(mload(0x8c0), mload(0x8c0), f_q))mstore(0x1c40, addmod(mload(0x1c20), sub(f_q, mload(0x8c0)), f_q))mstore(0x1c60, mulmod(mload(0x1c40), mload(0x10c0), f_q))mstore(0x1c80, addmod(mload(0x1c00), mload(0x1c60), f_q))mstore(0x1ca0, mulmod(mload(0x480), mload(0x1c80), f_q))mstore(0x1cc0, addmod(mload(0x8c0), sub(f_q, mload(0x8a0)), f_q))mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x1180), f_q))mstore(0x1d00, addmod(mload(0x1ca0), mload(0x1ce0), f_q))mstore(0x1d20, mulmod(mload(0x480), mload(0x1d00), f_q))mstore(0x1d40, addmod(1, sub(f_q, mload(0x10c0)), f_q))mstore(0x1d60, addmod(mload(0x10e0), mload(0x1100), f_q))mstore(0x1d80, addmod(mload(0x1d60), mload(0x1120), f_q))mstore(0x1da0, addmod(mload(0x1d80), mload(0x1140), f_q))mstore(0x1dc0, addmod(mload(0x1da0), mload(0x1160), f_q))mstore(0x1de0, addmod(mload(0x1d40), sub(f_q, mload(0x1dc0)), f_q))mstore(0x1e00, mulmod(mload(0x7c0), mload(0x2c0), f_q))mstore(0x1e20, addmod(mload(0x620), mload(0x1e00), f_q))mstore(0x1e40, addmod(mload(0x1e20), mload(0x320), f_q))mstore(0x1e60, mulmod(mload(0x7e0), mload(0x2c0), f_q))mstore(0x1e80, addmod(mload(0x640), mload(0x1e60), f_q))mstore(0x1ea0, addmod(mload(0x1e80), mload(0x320), f_q))mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x1e40), f_q))mstore(0x1ee0, mulmod(mload(0x800), mload(0x2c0), f_q))mstore(0x1f00, addmod(mload(0x660), mload(0x1ee0), f_q))mstore(0x1f20, addmod(mload(0x1f00), mload(0x320), f_q))mstore(0x1f40, mulmod(mload(0x1f20), mload(0x1ec0), f_q))mstore(0x1f60, mulmod(mload(0x1f40), mload(0x880), f_q))mstore(0x1f80, mulmod(1, mload(0x2c0), f_q))mstore(0x1fa0, mulmod(mload(0x5e0), mload(0x1f80), f_q))mstore(0x1fc0, addmod(mload(0x620), mload(0x1fa0), f_q))mstore(0x1fe0, addmod(mload(0x1fc0), mload(0x320), f_q))mstore(0x2000, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x2c0), f_q))mstore(0x2020, mulmod(mload(0x5e0), mload(0x2000), f_q))mstore(0x2040, addmod(mload(0x640), mload(0x2020), f_q))mstore(0x2060, addmod(mload(0x2040), mload(0x320), f_q))mstore(0x2080, mulmod(mload(0x2060), mload(0x1fe0), f_q))mstore(0x20a0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x2c0), f_q))mstore(0x20c0, mulmod(mload(0x5e0), mload(0x20a0), f_q))mstore(0x20e0, addmod(mload(0x660), mload(0x20c0), f_q))mstore(0x2100, addmod(mload(0x20e0), mload(0x320), f_q))mstore(0x2120, mulmod(mload(0x2100), mload(0x2080), f_q))mstore(0x2140, mulmod(mload(0x2120), mload(0x860), f_q))mstore(0x2160, addmod(mload(0x1f60), sub(f_q, mload(0x2140)), f_q))mstore(0x2180, mulmod(mload(0x2160), mload(0x1de0), f_q))mstore(0x21a0, addmod(mload(0x1d20), mload(0x2180), f_q))mstore(0x21c0, mulmod(mload(0x480), mload(0x21a0), f_q))mstore(0x21e0, mulmod(mload(0x820), mload(0x2c0), f_q))mstore(0x2200, addmod(mload(0x11e0), mload(0x21e0), f_q))mstore(0x2220, addmod(mload(0x2200), mload(0x320), f_q))mstore(0x2240, mulmod(mload(0x840), mload(0x2c0), f_q))mstore(0x2260, addmod(mload(0x6a0), mload(0x2240), f_q))mstore(0x2280, addmod(mload(0x2260), mload(0x320), f_q))mstore(0x22a0, mulmod(mload(0x2280), mload(0x2220), f_q))mstore(0x22c0, mulmod(mload(0x22a0), mload(0x8e0), f_q))mstore(0x22e0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x2c0), f_q))mstore(0x2300, mulmod(mload(0x5e0), mload(0x22e0), f_q))mstore(0x2320, addmod(mload(0x11e0), mload(0x2300), f_q))mstore(0x2340, addmod(mload(0x2320), mload(0x320), f_q))mstore(0x2360, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x2c0), f_q))mstore(0x2380, mulmod(mload(0x5e0), mload(0x2360), f_q))mstore(0x23a0, addmod(mload(0x6a0), mload(0x2380), f_q))mstore(0x23c0, addmod(mload(0x23a0), mload(0x320), f_q))mstore(0x23e0, mulmod(mload(0x23c0), mload(0x2340), f_q))mstore(0x2400, mulmod(mload(0x23e0), mload(0x8c0), f_q))mstore(0x2420, addmod(mload(0x22c0), sub(f_q, mload(0x2400)), f_q))mstore(0x2440, mulmod(mload(0x2420), mload(0x1de0), f_q))mstore(0x2460, addmod(mload(0x21c0), mload(0x2440), f_q))mstore(0x2480, mulmod(mload(0x480), mload(0x2460), f_q))mstore(0x24a0, addmod(1, sub(f_q, mload(0x900)), f_q))mstore(0x24c0, mulmod(mload(0x24a0), mload(0x1180), f_q))mstore(0x24e0, addmod(mload(0x2480), mload(0x24c0), f_q))mstore(0x2500, mulmod(mload(0x480), mload(0x24e0), f_q))mstore(0x2520, mulmod(mload(0x900), mload(0x900), f_q))mstore(0x2540, addmod(mload(0x2520), sub(f_q, mload(0x900)), f_q))mstore(0x2560, mulmod(mload(0x2540), mload(0x10c0), f_q))mstore(0x2580, addmod(mload(0x2500), mload(0x2560), f_q))mstore(0x25a0, mulmod(mload(0x480), mload(0x2580), f_q))mstore(0x25c0, addmod(mload(0x940), mload(0x2c0), f_q))mstore(0x25e0, mulmod(mload(0x25c0), mload(0x920), f_q))mstore(0x2600, addmod(mload(0x980), mload(0x320), f_q))mstore(0x2620, mulmod(mload(0x2600), mload(0x25e0), f_q))mstore(0x2640, mulmod(mload(0x620), mload(0x700), f_q))mstore(0x2660, addmod(1, sub(f_q, mload(0x700)), f_q))mstore(0x2680, mulmod(mload(0x2660), 0, f_q))mstore(0x26a0, addmod(mload(0x2640), mload(0x2680), f_q))mstore(0x26c0, mulmod(mload(0x1e0), mload(0x26a0), f_q))mstore(0x26e0, mulmod(mload(0x640), mload(0x700), f_q))mstore(0x2700, addmod(mload(0x26e0), mload(0x2680), f_q))mstore(0x2720, addmod(mload(0x26c0), mload(0x2700), f_q))mstore(0x2740, addmod(mload(0x2720), mload(0x2c0), f_q))mstore(0x2760, mulmod(mload(0x2740), mload(0x900), f_q))mstore(0x2780, mulmod(mload(0x1e0), mload(0x6c0), f_q))mstore(0x27a0, addmod(mload(0x2780), mload(0x6e0), f_q))mstore(0x27c0, addmod(mload(0x27a0), mload(0x320), f_q))mstore(0x27e0, mulmod(mload(0x27c0), mload(0x2760), f_q))mstore(0x2800, addmod(mload(0x2620), sub(f_q, mload(0x27e0)), f_q))mstore(0x2820, mulmod(mload(0x2800), mload(0x1de0), f_q))mstore(0x2840, addmod(mload(0x25a0), mload(0x2820), f_q))mstore(0x2860, mulmod(mload(0x480), mload(0x2840), f_q))mstore(0x2880, addmod(mload(0x940), sub(f_q, mload(0x980)), f_q))mstore(0x28a0, mulmod(mload(0x2880), mload(0x1180), f_q))mstore(0x28c0, addmod(mload(0x2860), mload(0x28a0), f_q))mstore(0x28e0, mulmod(mload(0x480), mload(0x28c0), f_q))mstore(0x2900, mulmod(mload(0x2880), mload(0x1de0), f_q))mstore(0x2920, addmod(mload(0x940), sub(f_q, mload(0x960)), f_q))mstore(0x2940, mulmod(mload(0x2920), mload(0x2900), f_q))mstore(0x2960, addmod(mload(0x28e0), mload(0x2940), f_q))mstore(0x2980, mulmod(mload(0xc20), mload(0xc20), f_q))mstore(0x29a0, mulmod(mload(0x2980), mload(0xc20), f_q))mstore(0x29c0, mulmod(mload(0x29a0), mload(0xc20), f_q))mstore(0x29e0, mulmod(1, mload(0xc20), f_q))mstore(0x2a00, mulmod(1, mload(0x2980), f_q))mstore(0x2a20, mulmod(1, mload(0x29a0), f_q))mstore(0x2a40, mulmod(mload(0x2960), mload(0xc40), f_q))mstore(0x2a60, mulmod(mload(0xb20), mload(0xb20), f_q))mstore(0x2a80, mulmod(mload(0x2a60), mload(0xb20), f_q))mstore(0x2aa0, mulmod(mload(0x2a80), mload(0xb20), f_q))mstore(0x2ac0, mulmod(mload(0x9c0), mload(0x9c0), f_q))mstore(0x2ae0, mulmod(mload(0x2ac0), mload(0x9c0), f_q))mstore(0x2b00, mulmod(mload(0x2ae0), mload(0x9c0), f_q))mstore(0x2b20, mulmod(mload(0x2b00), mload(0x9c0), f_q))mstore(0x2b40, mulmod(mload(0x2b20), mload(0x9c0), f_q))mstore(0x2b60, mulmod(mload(0x2b40), mload(0x9c0), f_q))mstore(0x2b80, mulmod(mload(0x2b60), mload(0x9c0), f_q))mstore(0x2ba0, mulmod(mload(0x2b80), mload(0x9c0), f_q))mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x9c0), f_q))mstore(0x2be0, mulmod(mload(0x2bc0), mload(0x9c0), f_q))mstore(0x2c00, mulmod(mload(0x2be0), mload(0x9c0), f_q))mstore(0x2c20, mulmod(mload(0x2c00), mload(0x9c0), f_q))mstore(0x2c40, mulmod(mload(0x2c20), mload(0x9c0), f_q))mstore(0x2c60, mulmod(mload(0x2c40), mload(0x9c0), f_q))mstore(0x2c80, mulmod(mload(0x2c60), mload(0x9c0), f_q))mstore(0x2ca0, mulmod(mload(0x2c80), mload(0x9c0), f_q))mstore(0x2cc0, mulmod(mload(0x2ca0), mload(0x9c0), f_q))mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0x9c0), f_q))mstore(0x2d00, mulmod(mload(0x2ce0), mload(0x9c0), f_q))mstore(0x2d20, mulmod(mload(0x2d00), mload(0x9c0), f_q))mstore(0x2d40, mulmod(mload(0x2d20), mload(0x9c0), f_q))mstore(0x2d60, mulmod(mload(0x2d40), mload(0x9c0), f_q))mstore(0x2d80, mulmod(sub(f_q, mload(0x620)), 1, f_q))mstore(0x2da0, mulmod(sub(f_q, mload(0x640)), mload(0x9c0), f_q))mstore(0x2dc0, mulmod(1, mload(0x9c0), f_q))mstore(0x2de0, addmod(mload(0x2d80), mload(0x2da0), f_q))mstore(0x2e00, mulmod(sub(f_q, mload(0x660)), mload(0x2ac0), f_q))mstore(0x2e20, mulmod(1, mload(0x2ac0), f_q))mstore(0x2e40, addmod(mload(0x2de0), mload(0x2e00), f_q))mstore(0x2e60, mulmod(sub(f_q, mload(0x860)), mload(0x2ae0), f_q))mstore(0x2e80, mulmod(1, mload(0x2ae0), f_q))mstore(0x2ea0, addmod(mload(0x2e40), mload(0x2e60), f_q))mstore(0x2ec0, mulmod(sub(f_q, mload(0x8c0)), mload(0x2b00), f_q))mstore(0x2ee0, mulmod(1, mload(0x2b00), f_q))mstore(0x2f00, addmod(mload(0x2ea0), mload(0x2ec0), f_q))mstore(0x2f20, mulmod(sub(f_q, mload(0x900)), mload(0x2b20), f_q))mstore(0x2f40, mulmod(1, mload(0x2b20), f_q))mstore(0x2f60, addmod(mload(0x2f00), mload(0x2f20), f_q))mstore(0x2f80, mulmod(sub(f_q, mload(0x940)), mload(0x2b40), f_q))mstore(0x2fa0, mulmod(1, mload(0x2b40), f_q))mstore(0x2fc0, addmod(mload(0x2f60), mload(0x2f80), f_q))mstore(0x2fe0, mulmod(sub(f_q, mload(0x980)), mload(0x2b60), f_q))mstore(0x3000, mulmod(1, mload(0x2b60), f_q))mstore(0x3020, addmod(mload(0x2fc0), mload(0x2fe0), f_q))mstore(0x3040, mulmod(sub(f_q, mload(0x6a0)), mload(0x2b80), f_q))mstore(0x3060, mulmod(1, mload(0x2b80), f_q))mstore(0x3080, addmod(mload(0x3020), mload(0x3040), f_q))mstore(0x30a0, mulmod(sub(f_q, mload(0x6c0)), mload(0x2ba0), f_q))mstore(0x30c0, mulmod(1, mload(0x2ba0), f_q))mstore(0x30e0, addmod(mload(0x3080), mload(0x30a0), f_q))mstore(0x3100, mulmod(sub(f_q, mload(0x6e0)), mload(0x2bc0), f_q))mstore(0x3120, mulmod(1, mload(0x2bc0), f_q))mstore(0x3140, addmod(mload(0x30e0), mload(0x3100), f_q))mstore(0x3160, mulmod(sub(f_q, mload(0x700)), mload(0x2be0), f_q))mstore(0x3180, mulmod(1, mload(0x2be0), f_q))mstore(0x31a0, addmod(mload(0x3140), mload(0x3160), f_q))mstore(0x31c0, mulmod(sub(f_q, mload(0x720)), mload(0x2c00), f_q))mstore(0x31e0, mulmod(1, mload(0x2c00), f_q))mstore(0x3200, addmod(mload(0x31a0), mload(0x31c0), f_q))mstore(0x3220, mulmod(sub(f_q, mload(0x740)), mload(0x2c20), f_q))mstore(0x3240, mulmod(1, mload(0x2c20), f_q))mstore(0x3260, addmod(mload(0x3200), mload(0x3220), f_q))mstore(0x3280, addmod(mload(0x3060), mload(0x3240), f_q))mstore(0x32a0, mulmod(sub(f_q, mload(0x760)), mload(0x2c40), f_q))mstore(0x32c0, mulmod(1, mload(0x2c40), f_q))mstore(0x32e0, addmod(mload(0x3260), mload(0x32a0), f_q))mstore(0x3300, mulmod(sub(f_q, mload(0x780)), mload(0x2c60), f_q))mstore(0x3320, mulmod(1, mload(0x2c60), f_q))mstore(0x3340, addmod(mload(0x32e0), mload(0x3300), f_q))mstore(0x3360, addmod(mload(0x3280), mload(0x3320), f_q))mstore(0x3380, mulmod(sub(f_q, mload(0x7c0)), mload(0x2c80), f_q))mstore(0x33a0, mulmod(1, mload(0x2c80), f_q))mstore(0x33c0, addmod(mload(0x3340), mload(0x3380), f_q))mstore(0x33e0, mulmod(sub(f_q, mload(0x7e0)), mload(0x2ca0), f_q))mstore(0x3400, mulmod(1, mload(0x2ca0), f_q))mstore(0x3420, addmod(mload(0x33c0), mload(0x33e0), f_q))mstore(0x3440, mulmod(sub(f_q, mload(0x800)), mload(0x2cc0), f_q))mstore(0x3460, mulmod(1, mload(0x2cc0), f_q))mstore(0x3480, addmod(mload(0x3420), mload(0x3440), f_q))mstore(0x34a0, mulmod(sub(f_q, mload(0x820)), mload(0x2ce0), f_q))mstore(0x34c0, mulmod(1, mload(0x2ce0), f_q))mstore(0x34e0, addmod(mload(0x3480), mload(0x34a0), f_q))mstore(0x3500, mulmod(sub(f_q, mload(0x840)), mload(0x2d00), f_q))mstore(0x3520, mulmod(1, mload(0x2d00), f_q))mstore(0x3540, addmod(mload(0x34e0), mload(0x3500), f_q))mstore(0x3560, mulmod(sub(f_q, mload(0x2a40)), mload(0x2d20), f_q))mstore(0x3580, mulmod(1, mload(0x2d20), f_q))mstore(0x35a0, mulmod(mload(0x29e0), mload(0x2d20), f_q))mstore(0x35c0, mulmod(mload(0x2a00), mload(0x2d20), f_q))mstore(0x35e0, mulmod(mload(0x2a20), mload(0x2d20), f_q))mstore(0x3600, addmod(mload(0x3540), mload(0x3560), f_q))mstore(0x3620, mulmod(sub(f_q, mload(0x7a0)), mload(0x2d40), f_q))mstore(0x3640, mulmod(1, mload(0x2d40), f_q))mstore(0x3660, addmod(mload(0x3600), mload(0x3620), f_q))mstore(0x3680, mulmod(mload(0x3660), 1, f_q))mstore(0x36a0, mulmod(mload(0x2dc0), 1, f_q))mstore(0x36c0, mulmod(mload(0x2e20), 1, f_q))mstore(0x36e0, mulmod(mload(0x2e80), 1, f_q))mstore(0x3700, mulmod(mload(0x2ee0), 1, f_q))mstore(0x3720, mulmod(mload(0x2f40), 1, f_q))mstore(0x3740, mulmod(mload(0x2fa0), 1, f_q))mstore(0x3760, mulmod(mload(0x3000), 1, f_q))mstore(0x3780, mulmod(mload(0x3360), 1, f_q))mstore(0x37a0, mulmod(mload(0x30c0), 1, f_q))mstore(0x37c0, mulmod(mload(0x3120), 1, f_q))mstore(0x37e0, mulmod(mload(0x3180), 1, f_q))mstore(0x3800, mulmod(mload(0x31e0), 1, f_q))mstore(0x3820, mulmod(mload(0x32c0), 1, f_q))mstore(0x3840, mulmod(mload(0x33a0), 1, f_q))mstore(0x3860, mulmod(mload(0x3400), 1, f_q))mstore(0x3880, mulmod(mload(0x3460), 1, f_q))mstore(0x38a0, mulmod(mload(0x34c0), 1, f_q))mstore(0x38c0, mulmod(mload(0x3520), 1, f_q))mstore(0x38e0, mulmod(mload(0x3580), 1, f_q))mstore(0x3900, mulmod(mload(0x35a0), 1, f_q))mstore(0x3920, mulmod(mload(0x35c0), 1, f_q))mstore(0x3940, mulmod(mload(0x35e0), 1, f_q))mstore(0x3960, mulmod(mload(0x3640), 1, f_q))mstore(0x3980, mulmod(sub(f_q, mload(0x680)), 1, f_q))mstore(0x39a0, mulmod(sub(f_q, mload(0x960)), mload(0x9c0), f_q))mstore(0x39c0, addmod(mload(0x3980), mload(0x39a0), f_q))mstore(0x39e0, mulmod(mload(0x39c0), mload(0xb20), f_q))mstore(0x3a00, mulmod(1, mload(0xb20), f_q))mstore(0x3a20, mulmod(mload(0x2dc0), mload(0xb20), f_q))mstore(0x3a40, addmod(mload(0x3680), mload(0x39e0), f_q))mstore(0x3a60, addmod(mload(0x36c0), mload(0x3a00), f_q))mstore(0x3a80, addmod(mload(0x3740), mload(0x3a20), f_q))mstore(0x3aa0, mulmod(sub(f_q, mload(0x880)), 1, f_q))mstore(0x3ac0, mulmod(sub(f_q, mload(0x8e0)), mload(0x9c0), f_q))mstore(0x3ae0, addmod(mload(0x3aa0), mload(0x3ac0), f_q))mstore(0x3b00, mulmod(sub(f_q, mload(0x920)), mload(0x2ac0), f_q))mstore(0x3b20, addmod(mload(0x3ae0), mload(0x3b00), f_q))mstore(0x3b40, mulmod(mload(0x3b20), mload(0x2a60), f_q))mstore(0x3b60, mulmod(1, mload(0x2a60), f_q))mstore(0x3b80, mulmod(mload(0x2dc0), mload(0x2a60), f_q))mstore(0x3ba0, mulmod(mload(0x2e20), mload(0x2a60), f_q))mstore(0x3bc0, addmod(mload(0x3a40), mload(0x3b40), f_q))mstore(0x3be0, addmod(mload(0x36e0), mload(0x3b60), f_q))mstore(0x3c00, addmod(mload(0x3700), mload(0x3b80), f_q))mstore(0x3c20, addmod(mload(0x3720), mload(0x3ba0), f_q))mstore(0x3c40, mulmod(sub(f_q, mload(0x8a0)), 1, f_q))mstore(0x3c60, mulmod(mload(0x3c40), mload(0x2a80), f_q))mstore(0x3c80, mulmod(1, mload(0x2a80), f_q))mstore(0x3ca0, addmod(mload(0x3bc0), mload(0x3c60), f_q))mstore(0x3cc0, addmod(mload(0x3be0), mload(0x3c80), f_q))mstore(0x3ce0, mulmod(1, mload(0x5e0), f_q))mstore(0x3d00, mulmod(1, mload(0x3ce0), f_q))mstore(0x3d20, mulmod(13677048343952077794467995888380402608453928821079198134318291065290235358859, mload(0x5e0), f_q))mstore(0x3d40, mulmod(mload(0x3a00), mload(0x3d20), f_q))mstore(0x3d60, mulmod(18154240498369470423574571952998640420834620155273666494480695920805672807787, mload(0x5e0), f_q))mstore(0x3d80, mulmod(mload(0x3b60), mload(0x3d60), f_q))mstore(0x3da0, mulmod(21262384822466439274137541430102393376441243110026393623692977826997277779276, mload(0x5e0), f_q))mstore(0x3dc0, mulmod(mload(0x3c80), mload(0x3da0), f_q))mstore(0x3de0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x3e00, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x3e20, mload(0x3ca0))success := and(eq(staticcall(gas(), 0x7, 0x3de0, 0x60, 0x3de0, 0x40), 1), success)mstore(0x3e40, mload(0x3de0))                    mstore(0x3e60, mload(0x3e00))mstore(0x3e80, mload(0x100))                    mstore(0x3ea0, mload(0x120))success := and(eq(staticcall(gas(), 0x6, 0x3e40, 0x80, 0x3e40, 0x40), 1), success)mstore(0x3ec0, mload(0x140))                    mstore(0x3ee0, mload(0x160))mstore(0x3f00, mload(0x36a0))success := and(eq(staticcall(gas(), 0x7, 0x3ec0, 0x60, 0x3ec0, 0x40), 1), success)mstore(0x3f20, mload(0x3e40))                    mstore(0x3f40, mload(0x3e60))mstore(0x3f60, mload(0x3ec0))                    mstore(0x3f80, mload(0x3ee0))success := and(eq(staticcall(gas(), 0x6, 0x3f20, 0x80, 0x3f20, 0x40), 1), success)mstore(0x3fa0, mload(0x180))                    mstore(0x3fc0, mload(0x1a0))mstore(0x3fe0, mload(0x3a60))success := and(eq(staticcall(gas(), 0x7, 0x3fa0, 0x60, 0x3fa0, 0x40), 1), success)mstore(0x4000, mload(0x3f20))                    mstore(0x4020, mload(0x3f40))mstore(0x4040, mload(0x3fa0))                    mstore(0x4060, mload(0x3fc0))success := and(eq(staticcall(gas(), 0x6, 0x4000, 0x80, 0x4000, 0x40), 1), success)mstore(0x4080, mload(0x360))                    mstore(0x40a0, mload(0x380))mstore(0x40c0, mload(0x3cc0))success := and(eq(staticcall(gas(), 0x7, 0x4080, 0x60, 0x4080, 0x40), 1), success)mstore(0x40e0, mload(0x4000))                    mstore(0x4100, mload(0x4020))mstore(0x4120, mload(0x4080))                    mstore(0x4140, mload(0x40a0))success := and(eq(staticcall(gas(), 0x6, 0x40e0, 0x80, 0x40e0, 0x40), 1), success)mstore(0x4160, mload(0x3a0))                    mstore(0x4180, mload(0x3c0))mstore(0x41a0, mload(0x3c00))success := and(eq(staticcall(gas(), 0x7, 0x4160, 0x60, 0x4160, 0x40), 1), success)mstore(0x41c0, mload(0x40e0))                    mstore(0x41e0, mload(0x4100))mstore(0x4200, mload(0x4160))                    mstore(0x4220, mload(0x4180))success := and(eq(staticcall(gas(), 0x6, 0x41c0, 0x80, 0x41c0, 0x40), 1), success)mstore(0x4240, mload(0x3e0))                    mstore(0x4260, mload(0x400))mstore(0x4280, mload(0x3c20))success := and(eq(staticcall(gas(), 0x7, 0x4240, 0x60, 0x4240, 0x40), 1), success)mstore(0x42a0, mload(0x41c0))                    mstore(0x42c0, mload(0x41e0))mstore(0x42e0, mload(0x4240))                    mstore(0x4300, mload(0x4260))success := and(eq(staticcall(gas(), 0x6, 0x42a0, 0x80, 0x42a0, 0x40), 1), success)mstore(0x4320, mload(0x220))                    mstore(0x4340, mload(0x240))mstore(0x4360, mload(0x3a80))success := and(eq(staticcall(gas(), 0x7, 0x4320, 0x60, 0x4320, 0x40), 1), success)mstore(0x4380, mload(0x42a0))                    mstore(0x43a0, mload(0x42c0))mstore(0x43c0, mload(0x4320))                    mstore(0x43e0, mload(0x4340))success := and(eq(staticcall(gas(), 0x6, 0x4380, 0x80, 0x4380, 0x40), 1), success)mstore(0x4400, mload(0x260))                    mstore(0x4420, mload(0x280))mstore(0x4440, mload(0x3760))success := and(eq(staticcall(gas(), 0x7, 0x4400, 0x60, 0x4400, 0x40), 1), success)mstore(0x4460, mload(0x4380))                    mstore(0x4480, mload(0x43a0))mstore(0x44a0, mload(0x4400))                    mstore(0x44c0, mload(0x4420))success := and(eq(staticcall(gas(), 0x6, 0x4460, 0x80, 0x4460, 0x40), 1), success)mstore(0x44e0, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x4500, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x4520, mload(0x3780))success := and(eq(staticcall(gas(), 0x7, 0x44e0, 0x60, 0x44e0, 0x40), 1), success)mstore(0x4540, mload(0x4460))                    mstore(0x4560, mload(0x4480))mstore(0x4580, mload(0x44e0))                    mstore(0x45a0, mload(0x4500))success := and(eq(staticcall(gas(), 0x6, 0x4540, 0x80, 0x4540, 0x40), 1), success)mstore(0x45c0, 0x00ebcc0d1654f1f98ddd6b1a88db9d70682236af03a27a6f9ed8f71a449bb46b)                    mstore(0x45e0, 0x2214cc931b387659a63f893b8b08863273987ff1067dba2963b53b5abe808ed3)mstore(0x4600, mload(0x37a0))success := and(eq(staticcall(gas(), 0x7, 0x45c0, 0x60, 0x45c0, 0x40), 1), success)mstore(0x4620, mload(0x4540))                    mstore(0x4640, mload(0x4560))mstore(0x4660, mload(0x45c0))                    mstore(0x4680, mload(0x45e0))success := and(eq(staticcall(gas(), 0x6, 0x4620, 0x80, 0x4620, 0x40), 1), success)mstore(0x46a0, 0x24b4843f9a4b646d001b3cef3d087810a24badc975098cf8bd61d6b4abaed835)                    mstore(0x46c0, 0x1c85319bfc124b4a5f986c0dde116dd5aedc97550c5b0fa0c7f6c3d8b1a7d3a9)mstore(0x46e0, mload(0x37c0))success := and(eq(staticcall(gas(), 0x7, 0x46a0, 0x60, 0x46a0, 0x40), 1), success)mstore(0x4700, mload(0x4620))                    mstore(0x4720, mload(0x4640))mstore(0x4740, mload(0x46a0))                    mstore(0x4760, mload(0x46c0))success := and(eq(staticcall(gas(), 0x6, 0x4700, 0x80, 0x4700, 0x40), 1), success)mstore(0x4780, 0x2b061cf80e8f1db406d9de08b4410deaa17256119e1f23477ea63c0f20b5c52d)                    mstore(0x47a0, 0x0ab8e99f022bed0cba846f62f889196b53ce1f124a9ce6859a38732ded75666b)mstore(0x47c0, mload(0x37e0))success := and(eq(staticcall(gas(), 0x7, 0x4780, 0x60, 0x4780, 0x40), 1), success)mstore(0x47e0, mload(0x4700))                    mstore(0x4800, mload(0x4720))mstore(0x4820, mload(0x4780))                    mstore(0x4840, mload(0x47a0))success := and(eq(staticcall(gas(), 0x6, 0x47e0, 0x80, 0x47e0, 0x40), 1), success)mstore(0x4860, 0x1981ea66b67571af457df349153f154b27427d50dc6aa1d879463da6e73becdd)                    mstore(0x4880, 0x04055b89f9e23979b5c2a6e7f272def328f2c6a4c893669a37e51c69701058e3)mstore(0x48a0, mload(0x3800))success := and(eq(staticcall(gas(), 0x7, 0x4860, 0x60, 0x4860, 0x40), 1), success)mstore(0x48c0, mload(0x47e0))                    mstore(0x48e0, mload(0x4800))mstore(0x4900, mload(0x4860))                    mstore(0x4920, mload(0x4880))success := and(eq(staticcall(gas(), 0x6, 0x48c0, 0x80, 0x48c0, 0x40), 1), success)mstore(0x4940, 0x02eb6c250a2752d24ff54ab5d04208810be48911682f017e6e4a58a9f1ed9e2c)                    mstore(0x4960, 0x1ebb9cc57cbd5744a51c44cc5927bc96366f5773f484aa9704e00795a172eb80)mstore(0x4980, mload(0x3820))success := and(eq(staticcall(gas(), 0x7, 0x4940, 0x60, 0x4940, 0x40), 1), success)mstore(0x49a0, mload(0x48c0))                    mstore(0x49c0, mload(0x48e0))mstore(0x49e0, mload(0x4940))                    mstore(0x4a00, mload(0x4960))success := and(eq(staticcall(gas(), 0x6, 0x49a0, 0x80, 0x49a0, 0x40), 1), success)mstore(0x4a20, 0x1a423f0057087fb50b71e33c1a5822fcaa7956cc5cef5e183919aa748be9af3c)                    mstore(0x4a40, 0x14964b040bc0e49c09eaddc82349c09cd2fa411545c67949b6bec550e6f53590)mstore(0x4a60, mload(0x3840))success := and(eq(staticcall(gas(), 0x7, 0x4a20, 0x60, 0x4a20, 0x40), 1), success)mstore(0x4a80, mload(0x49a0))                    mstore(0x4aa0, mload(0x49c0))mstore(0x4ac0, mload(0x4a20))                    mstore(0x4ae0, mload(0x4a40))success := and(eq(staticcall(gas(), 0x6, 0x4a80, 0x80, 0x4a80, 0x40), 1), success)mstore(0x4b00, 0x13544822451ef3c428cea01808e4d56dc3e4be653c3290f5980bd88b13423a19)                    mstore(0x4b20, 0x1479416f90980d20aeeb65e4f000aa10e512e116477f21a21e2f2186bce7fe51)mstore(0x4b40, mload(0x3860))success := and(eq(staticcall(gas(), 0x7, 0x4b00, 0x60, 0x4b00, 0x40), 1), success)mstore(0x4b60, mload(0x4a80))                    mstore(0x4b80, mload(0x4aa0))mstore(0x4ba0, mload(0x4b00))                    mstore(0x4bc0, mload(0x4b20))success := and(eq(staticcall(gas(), 0x6, 0x4b60, 0x80, 0x4b60, 0x40), 1), success)mstore(0x4be0, 0x1b45561d094272ad764b616d0485dd4ec215195d75db7f9d048e4e8c44fb5411)                    mstore(0x4c00, 0x113999b097ca82613e5c05095e6236ad8c60e4ca4e1c260d740d575db23585ba)mstore(0x4c20, mload(0x3880))success := and(eq(staticcall(gas(), 0x7, 0x4be0, 0x60, 0x4be0, 0x40), 1), success)mstore(0x4c40, mload(0x4b60))                    mstore(0x4c60, mload(0x4b80))mstore(0x4c80, mload(0x4be0))                    mstore(0x4ca0, mload(0x4c00))success := and(eq(staticcall(gas(), 0x6, 0x4c40, 0x80, 0x4c40, 0x40), 1), success)mstore(0x4cc0, 0x2056da1a94a086bcb9120d9c4a445d77e0929867f406d87ef0036ed57bf2b2c4)                    mstore(0x4ce0, 0x26969ac31d52244be201c4c31ce7a2b96407a9ab88470b9b0f0f83a958fb92f5)mstore(0x4d00, mload(0x38a0))success := and(eq(staticcall(gas(), 0x7, 0x4cc0, 0x60, 0x4cc0, 0x40), 1), success)mstore(0x4d20, mload(0x4c40))                    mstore(0x4d40, mload(0x4c60))mstore(0x4d60, mload(0x4cc0))                    mstore(0x4d80, mload(0x4ce0))success := and(eq(staticcall(gas(), 0x6, 0x4d20, 0x80, 0x4d20, 0x40), 1), success)mstore(0x4da0, 0x088931b6933831d6899ae7ce9a1052284545afff9f21a235e61ad1decbf06f9f)                    mstore(0x4dc0, 0x248c0912aa97d903345b691d643dc9407aca9dab62bf3fa8dd2200c1283c4a5c)mstore(0x4de0, mload(0x38c0))success := and(eq(staticcall(gas(), 0x7, 0x4da0, 0x60, 0x4da0, 0x40), 1), success)mstore(0x4e00, mload(0x4d20))                    mstore(0x4e20, mload(0x4d40))mstore(0x4e40, mload(0x4da0))                    mstore(0x4e60, mload(0x4dc0))success := and(eq(staticcall(gas(), 0x6, 0x4e00, 0x80, 0x4e00, 0x40), 1), success)mstore(0x4e80, mload(0x4c0))                    mstore(0x4ea0, mload(0x4e0))mstore(0x4ec0, mload(0x38e0))success := and(eq(staticcall(gas(), 0x7, 0x4e80, 0x60, 0x4e80, 0x40), 1), success)mstore(0x4ee0, mload(0x4e00))                    mstore(0x4f00, mload(0x4e20))mstore(0x4f20, mload(0x4e80))                    mstore(0x4f40, mload(0x4ea0))success := and(eq(staticcall(gas(), 0x6, 0x4ee0, 0x80, 0x4ee0, 0x40), 1), success)mstore(0x4f60, mload(0x500))                    mstore(0x4f80, mload(0x520))mstore(0x4fa0, mload(0x3900))success := and(eq(staticcall(gas(), 0x7, 0x4f60, 0x60, 0x4f60, 0x40), 1), success)mstore(0x4fc0, mload(0x4ee0))                    mstore(0x4fe0, mload(0x4f00))mstore(0x5000, mload(0x4f60))                    mstore(0x5020, mload(0x4f80))success := and(eq(staticcall(gas(), 0x6, 0x4fc0, 0x80, 0x4fc0, 0x40), 1), success)mstore(0x5040, mload(0x540))                    mstore(0x5060, mload(0x560))mstore(0x5080, mload(0x3920))success := and(eq(staticcall(gas(), 0x7, 0x5040, 0x60, 0x5040, 0x40), 1), success)mstore(0x50a0, mload(0x4fc0))                    mstore(0x50c0, mload(0x4fe0))mstore(0x50e0, mload(0x5040))                    mstore(0x5100, mload(0x5060))success := and(eq(staticcall(gas(), 0x6, 0x50a0, 0x80, 0x50a0, 0x40), 1), success)mstore(0x5120, mload(0x580))                    mstore(0x5140, mload(0x5a0))mstore(0x5160, mload(0x3940))success := and(eq(staticcall(gas(), 0x7, 0x5120, 0x60, 0x5120, 0x40), 1), success)mstore(0x5180, mload(0x50a0))                    mstore(0x51a0, mload(0x50c0))mstore(0x51c0, mload(0x5120))                    mstore(0x51e0, mload(0x5140))success := and(eq(staticcall(gas(), 0x6, 0x5180, 0x80, 0x5180, 0x40), 1), success)mstore(0x5200, mload(0x420))                    mstore(0x5220, mload(0x440))mstore(0x5240, mload(0x3960))success := and(eq(staticcall(gas(), 0x7, 0x5200, 0x60, 0x5200, 0x40), 1), success)mstore(0x5260, mload(0x5180))                    mstore(0x5280, mload(0x51a0))mstore(0x52a0, mload(0x5200))                    mstore(0x52c0, mload(0x5220))success := and(eq(staticcall(gas(), 0x6, 0x5260, 0x80, 0x5260, 0x40), 1), success)mstore(0x52e0, mload(0xa00))                    mstore(0x5300, mload(0xa20))mstore(0x5320, mload(0x3d00))success := and(eq(staticcall(gas(), 0x7, 0x52e0, 0x60, 0x52e0, 0x40), 1), success)mstore(0x5340, mload(0x5260))                    mstore(0x5360, mload(0x5280))mstore(0x5380, mload(0x52e0))                    mstore(0x53a0, mload(0x5300))success := and(eq(staticcall(gas(), 0x6, 0x5340, 0x80, 0x5340, 0x40), 1), success)mstore(0x53c0, mload(0xa40))                    mstore(0x53e0, mload(0xa60))mstore(0x5400, mload(0x3d40))success := and(eq(staticcall(gas(), 0x7, 0x53c0, 0x60, 0x53c0, 0x40), 1), success)mstore(0x5420, mload(0x5340))                    mstore(0x5440, mload(0x5360))mstore(0x5460, mload(0x53c0))                    mstore(0x5480, mload(0x53e0))success := and(eq(staticcall(gas(), 0x6, 0x5420, 0x80, 0x5420, 0x40), 1), success)mstore(0x54a0, mload(0xa80))                    mstore(0x54c0, mload(0xaa0))mstore(0x54e0, mload(0x3d80))success := and(eq(staticcall(gas(), 0x7, 0x54a0, 0x60, 0x54a0, 0x40), 1), success)mstore(0x5500, mload(0x5420))                    mstore(0x5520, mload(0x5440))mstore(0x5540, mload(0x54a0))                    mstore(0x5560, mload(0x54c0))success := and(eq(staticcall(gas(), 0x6, 0x5500, 0x80, 0x5500, 0x40), 1), success)mstore(0x5580, mload(0xac0))                    mstore(0x55a0, mload(0xae0))mstore(0x55c0, mload(0x3dc0))success := and(eq(staticcall(gas(), 0x7, 0x5580, 0x60, 0x5580, 0x40), 1), success)mstore(0x55e0, mload(0x5500))                    mstore(0x5600, mload(0x5520))mstore(0x5620, mload(0x5580))                    mstore(0x5640, mload(0x55a0))success := and(eq(staticcall(gas(), 0x6, 0x55e0, 0x80, 0x55e0, 0x40), 1), success)mstore(0x5660, mload(0xa40))                    mstore(0x5680, mload(0xa60))mstore(0x56a0, mload(0x3a00))success := and(eq(staticcall(gas(), 0x7, 0x5660, 0x60, 0x5660, 0x40), 1), success)mstore(0x56c0, mload(0xa00))                    mstore(0x56e0, mload(0xa20))mstore(0x5700, mload(0x5660))                    mstore(0x5720, mload(0x5680))success := and(eq(staticcall(gas(), 0x6, 0x56c0, 0x80, 0x56c0, 0x40), 1), success)mstore(0x5740, mload(0xa80))                    mstore(0x5760, mload(0xaa0))mstore(0x5780, mload(0x3b60))success := and(eq(staticcall(gas(), 0x7, 0x5740, 0x60, 0x5740, 0x40), 1), success)mstore(0x57a0, mload(0x56c0))                    mstore(0x57c0, mload(0x56e0))mstore(0x57e0, mload(0x5740))                    mstore(0x5800, mload(0x5760))success := and(eq(staticcall(gas(), 0x6, 0x57a0, 0x80, 0x57a0, 0x40), 1), success)mstore(0x5820, mload(0xac0))                    mstore(0x5840, mload(0xae0))mstore(0x5860, mload(0x3c80))success := and(eq(staticcall(gas(), 0x7, 0x5820, 0x60, 0x5820, 0x40), 1), success)mstore(0x5880, mload(0x57a0))                    mstore(0x58a0, mload(0x57c0))mstore(0x58c0, mload(0x5820))                    mstore(0x58e0, mload(0x5840))success := and(eq(staticcall(gas(), 0x6, 0x5880, 0x80, 0x5880, 0x40), 1), success)mstore(0x5900, mload(0x55e0))                    mstore(0x5920, mload(0x5600))mstore(0x5940, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x5960, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x5980, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x59a0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x59c0, mload(0x5880))                    mstore(0x59e0, mload(0x58a0))mstore(0x5a00, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x5a20, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x5a40, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x5a60, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x5900, 0x180, 0x5900, 0x20), 1), success)success := and(eq(mload(0x5900), 1), success)} return success; } }



